/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.nauta.voyager.dialog;

import com.nauta.voyager.people.Function;
import com.nauta.voyager.pob.Raft;
import com.nauta.voyager.VoyagerModel;
import com.nauta.voyager.util.StateListener;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Map;
import javax.swing.JDialog;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;

/**
 *
 * @author rodrigo
 */
public class RaftRuleDialog extends javax.swing.JDialog 
        implements StateListener {
    
    private final VoyagerModel model;
    
    // The column number at the table that holds the formal key to use as a raft
    // rule
    private final int KEY_COLUMN = 3;
    
    private final String TITLE = "Editar Regras de Balsas";
    
    /**
     * Creates new form RaftRuleDialog
     */
    public RaftRuleDialog(java.awt.Frame parent, boolean modal,
            VoyagerModel model) {
        super(parent, modal);
        this.model = model;
        initComponents();
        initPresentationLogic();
        setTitle(TITLE);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        raftPanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ruleTable = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        editButton = new javax.swing.JButton();
        removeButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        raftPanel.setBackground(new java.awt.Color(255, 255, 255));
        raftPanel.setForeground(new java.awt.Color(0, 0, 0));

        ruleTable.setBackground(new java.awt.Color(255, 255, 255));
        ruleTable.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        ruleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        ruleTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(ruleTable);

        addButton.setBackground(new java.awt.Color(102, 255, 0));
        addButton.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        addButton.setForeground(new java.awt.Color(0, 0, 0));
        addButton.setText("Nova");
        addButton.setActionCommand("add");

        editButton.setBackground(new java.awt.Color(255, 255, 255));
        editButton.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        editButton.setForeground(new java.awt.Color(0, 0, 0));
        editButton.setText("Editar");
        editButton.setActionCommand("edit");
        editButton.setEnabled(false);

        removeButton.setBackground(new java.awt.Color(255, 0, 51));
        removeButton.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        removeButton.setForeground(new java.awt.Color(0, 0, 0));
        removeButton.setText("Remover");
        removeButton.setActionCommand("remove");
        removeButton.setEnabled(false);

        javax.swing.GroupLayout raftPanelLayout = new javax.swing.GroupLayout(raftPanel);
        raftPanel.setLayout(raftPanelLayout);
        raftPanelLayout.setHorizontalGroup(
            raftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(raftPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(raftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(editButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        raftPanelLayout.setVerticalGroup(
            raftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(raftPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(raftPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(raftPanelLayout.createSequentialGroup()
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(editButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeButton))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(raftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(raftPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initPresentationLogic() {
        model.addStateListener(this);
        
        ActionListener bHandler = new ButtonsHandler();
        addButton.addActionListener(bHandler);
        editButton.addActionListener(bHandler);
        removeButton.addActionListener(bHandler);
        
        // Sets table with its model
        ruleTable.setModel(new RuleTableModel());
        ruleTable.getSelectionModel()
                .addListSelectionListener(new TableHandler());
    }
    
    private void readGUIStateFromDomain() {
        ((RuleTableModel) ruleTable.getModel()).loadData();
    }

    @Override
    public void onListenedStateChanged() {
        readGUIStateFromDomain();
    }
    
    private final class ButtonsHandler implements ActionListener {
        @Override
        public void actionPerformed(ActionEvent e) {
            switch (e.getActionCommand()) {
                case "add" -> {                    
                    JDialog d = new AddRuleDialog(RaftRuleDialog.this, model,
                            null);
                }
                
                case "edit" -> {                    
                    int row = ruleTable.getSelectedRow();                    
                    Object key = ruleTable.getModel()
                            .getValueAt(row, KEY_COLUMN);
                    JDialog d = new AddRuleDialog(RaftRuleDialog.this, model,
                            key );
                }
                
                case "remove" -> {
                    int row = ruleTable.getSelectedRow();
                    Object key = ruleTable.getModel()
                            .getValueAt(row, KEY_COLUMN);
                    model.removeRaftRule(key);
                }
                
                default -> {                    
                }
            }
        }        
    }
    
    private final class TableHandler implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            setButtonsState();
        }
        
    }
    
    private void setButtonsState() {
        if (ruleTable.getSelectedRow() > -1) {
            editButton.setEnabled(true);
            removeButton.setEnabled(true);
        } else {
            editButton.setEnabled(false);
            removeButton.setEnabled(false);
        }
    }
    
    
    private final class RuleTableModel extends AbstractTableModel {
        private final String[] columnNames = {
            "BALSA",
            "VINCULADA A",
            "VALOR"
        };
        
        private Object[][] data;
        
        private RuleTableModel() {
            loadData();
        }
        
        private void loadData() {
            Map<Object, Raft> map = model.getAllRaftRules();
            
            // The 1 is necessary to have a column that is not shown!
            // This column holds the type of the argument
            data = new Object[map.size()][getColumnCount() + 1];
            
            int row = 0;
            for (Map.Entry<Object, Raft> entry : map.entrySet()) {
                data[row][0] = entry.getValue().textPT();
                
                String key = (String) entry.getKey();
                if (key.contains(Function.TAG)) {
                    Function f = model.getFunctionByIdentifier(key);
                    data[row][1] = "Função";
                    data[row][2] = (f.getFormalDescription());
                    data[row][KEY_COLUMN] = f;
                } else {
                    data[row][1] = "Camarote";
                    data[row][2] = key;
                    data[row][KEY_COLUMN] = key;
                }
                row++;                
            }
            
            fireTableDataChanged();
        }
        
        @Override
        public int getRowCount() {
            return data.length;
        }

        @Override
        public int getColumnCount() {
            return columnNames.length;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            return data[rowIndex][columnIndex];
        }

        @Override
        public String getColumnName(int column) {
            return columnNames[column];
        }

        
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton editButton;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel raftPanel;
    private javax.swing.JButton removeButton;
    private javax.swing.JTable ruleTable;
    // End of variables declaration//GEN-END:variables
}
